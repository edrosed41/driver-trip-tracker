{"remainingRequest":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/babel-loader/lib/index.js!/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/vuetify/lib/components/VCalendar/util/timestamp.js","dependencies":[{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/vuetify/lib/components/VCalendar/util/timestamp.js","mtime":499162500000},{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldFN0YXJ0T2ZXZWVrID0gZ2V0U3RhcnRPZldlZWs7CmV4cG9ydHMuZ2V0RW5kT2ZXZWVrID0gZ2V0RW5kT2ZXZWVrOwpleHBvcnRzLmdldFN0YXJ0T2ZNb250aCA9IGdldFN0YXJ0T2ZNb250aDsKZXhwb3J0cy5nZXRFbmRPZk1vbnRoID0gZ2V0RW5kT2ZNb250aDsKZXhwb3J0cy52YWxpZGF0ZVRpbWUgPSB2YWxpZGF0ZVRpbWU7CmV4cG9ydHMucGFyc2VUaW1lID0gcGFyc2VUaW1lOwpleHBvcnRzLnZhbGlkYXRlVGltZXN0YW1wID0gdmFsaWRhdGVUaW1lc3RhbXA7CmV4cG9ydHMucGFyc2VUaW1lc3RhbXAgPSBwYXJzZVRpbWVzdGFtcDsKZXhwb3J0cy5wYXJzZURhdGUgPSBwYXJzZURhdGU7CmV4cG9ydHMuZ2V0RGF5SWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXI7CmV4cG9ydHMuZ2V0VGltZUlkZW50aWZpZXIgPSBnZXRUaW1lSWRlbnRpZmllcjsKZXhwb3J0cy5nZXRUaW1lc3RhbXBJZGVudGlmaWVyID0gZ2V0VGltZXN0YW1wSWRlbnRpZmllcjsKZXhwb3J0cy51cGRhdGVSZWxhdGl2ZSA9IHVwZGF0ZVJlbGF0aXZlOwpleHBvcnRzLmlzVGltZWRsZXNzID0gaXNUaW1lZGxlc3M7CmV4cG9ydHMudXBkYXRlSGFzVGltZSA9IHVwZGF0ZUhhc1RpbWU7CmV4cG9ydHMudXBkYXRlTWludXRlcyA9IHVwZGF0ZU1pbnV0ZXM7CmV4cG9ydHMudXBkYXRlV2Vla2RheSA9IHVwZGF0ZVdlZWtkYXk7CmV4cG9ydHMudXBkYXRlRm9ybWF0dGVkID0gdXBkYXRlRm9ybWF0dGVkOwpleHBvcnRzLmdldFdlZWtkYXkgPSBnZXRXZWVrZGF5OwpleHBvcnRzLmRheXNJbk1vbnRoID0gZGF5c0luTW9udGg7CmV4cG9ydHMuY29weVRpbWVzdGFtcCA9IGNvcHlUaW1lc3RhbXA7CmV4cG9ydHMucGFkTnVtYmVyID0gcGFkTnVtYmVyOwpleHBvcnRzLmdldERhdGUgPSBnZXREYXRlOwpleHBvcnRzLmdldFRpbWUgPSBnZXRUaW1lOwpleHBvcnRzLm5leHRNaW51dGVzID0gbmV4dE1pbnV0ZXM7CmV4cG9ydHMubmV4dERheSA9IG5leHREYXk7CmV4cG9ydHMucHJldkRheSA9IHByZXZEYXk7CmV4cG9ydHMucmVsYXRpdmVEYXlzID0gcmVsYXRpdmVEYXlzOwpleHBvcnRzLmRpZmZNaW51dGVzID0gZGlmZk1pbnV0ZXM7CmV4cG9ydHMuZmluZFdlZWtkYXkgPSBmaW5kV2Vla2RheTsKZXhwb3J0cy5nZXRXZWVrZGF5U2tpcHMgPSBnZXRXZWVrZGF5U2tpcHM7CmV4cG9ydHMudGltZXN0YW1wVG9EYXRlID0gdGltZXN0YW1wVG9EYXRlOwpleHBvcnRzLmNyZWF0ZURheUxpc3QgPSBjcmVhdGVEYXlMaXN0OwpleHBvcnRzLmNyZWF0ZUludGVydmFsTGlzdCA9IGNyZWF0ZUludGVydmFsTGlzdDsKZXhwb3J0cy5jcmVhdGVOYXRpdmVMb2NhbGVGb3JtYXR0ZXIgPSBjcmVhdGVOYXRpdmVMb2NhbGVGb3JtYXR0ZXI7CmV4cG9ydHMuT0ZGU0VUX1RJTUUgPSBleHBvcnRzLk9GRlNFVF9IT1VSID0gZXhwb3J0cy5PRkZTRVRfTU9OVEggPSBleHBvcnRzLk9GRlNFVF9ZRUFSID0gZXhwb3J0cy5GSVJTVF9IT1VSID0gZXhwb3J0cy5IT1VSX01BWCA9IGV4cG9ydHMuSE9VUlNfSU5fREFZID0gZXhwb3J0cy5NSU5VVEVTX0lOX0RBWSA9IGV4cG9ydHMuTUlOVVRFX01BWCA9IGV4cG9ydHMuTUlOVVRFU19JTl9IT1VSID0gZXhwb3J0cy5EQVlTX0lOX1dFRUsgPSBleHBvcnRzLkRBWV9NSU4gPSBleHBvcnRzLk1PTlRIX01JTiA9IGV4cG9ydHMuTU9OVEhfTUFYID0gZXhwb3J0cy5EQVlTX0lOX01PTlRIX01BWCA9IGV4cG9ydHMuREFZU19JTl9NT05USF9NSU4gPSBleHBvcnRzLkRBWVNfSU5fTU9OVEhfTEVBUCA9IGV4cG9ydHMuREFZU19JTl9NT05USCA9IGV4cG9ydHMuUEFSU0VfVElNRSA9IGV4cG9ydHMuUEFSU0VfUkVHRVggPSB2b2lkIDA7Cgp2YXIgX2RhdGVUaW1lVXRpbHMgPSByZXF1aXJlKCIuLi8uLi8uLi91dGlsL2RhdGVUaW1lVXRpbHMiKTsKCmNvbnN0IFBBUlNFX1JFR0VYID0gL14oXGR7NH0pLShcZHsxLDJ9KSgtKFxkezEsMn0pKT8oW15cZF0rKFxkezEsMn0pKT8oOihcZHsxLDJ9KSk/KDooXGR7MSwyfSkpPyQvOwpleHBvcnRzLlBBUlNFX1JFR0VYID0gUEFSU0VfUkVHRVg7CmNvbnN0IFBBUlNFX1RJTUUgPSAvKFxkXGQ/KSg6KFxkXGQ/KXwpKDooXGRcZD8pfCkvOwpleHBvcnRzLlBBUlNFX1RJTUUgPSBQQVJTRV9USU1FOwpjb25zdCBEQVlTX0lOX01PTlRIID0gWzAsIDMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdOwpleHBvcnRzLkRBWVNfSU5fTU9OVEggPSBEQVlTX0lOX01PTlRIOwpjb25zdCBEQVlTX0lOX01PTlRIX0xFQVAgPSBbMCwgMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07CmV4cG9ydHMuREFZU19JTl9NT05USF9MRUFQID0gREFZU19JTl9NT05USF9MRUFQOwpjb25zdCBEQVlTX0lOX01PTlRIX01JTiA9IDI4OwpleHBvcnRzLkRBWVNfSU5fTU9OVEhfTUlOID0gREFZU19JTl9NT05USF9NSU47CmNvbnN0IERBWVNfSU5fTU9OVEhfTUFYID0gMzE7CmV4cG9ydHMuREFZU19JTl9NT05USF9NQVggPSBEQVlTX0lOX01PTlRIX01BWDsKY29uc3QgTU9OVEhfTUFYID0gMTI7CmV4cG9ydHMuTU9OVEhfTUFYID0gTU9OVEhfTUFYOwpjb25zdCBNT05USF9NSU4gPSAxOwpleHBvcnRzLk1PTlRIX01JTiA9IE1PTlRIX01JTjsKY29uc3QgREFZX01JTiA9IDE7CmV4cG9ydHMuREFZX01JTiA9IERBWV9NSU47CmNvbnN0IERBWVNfSU5fV0VFSyA9IDc7CmV4cG9ydHMuREFZU19JTl9XRUVLID0gREFZU19JTl9XRUVLOwpjb25zdCBNSU5VVEVTX0lOX0hPVVIgPSA2MDsKZXhwb3J0cy5NSU5VVEVTX0lOX0hPVVIgPSBNSU5VVEVTX0lOX0hPVVI7CmNvbnN0IE1JTlVURV9NQVggPSA1OTsKZXhwb3J0cy5NSU5VVEVfTUFYID0gTUlOVVRFX01BWDsKY29uc3QgTUlOVVRFU19JTl9EQVkgPSAyNCAqIDYwOwpleHBvcnRzLk1JTlVURVNfSU5fREFZID0gTUlOVVRFU19JTl9EQVk7CmNvbnN0IEhPVVJTX0lOX0RBWSA9IDI0OwpleHBvcnRzLkhPVVJTX0lOX0RBWSA9IEhPVVJTX0lOX0RBWTsKY29uc3QgSE9VUl9NQVggPSAyMzsKZXhwb3J0cy5IT1VSX01BWCA9IEhPVVJfTUFYOwpjb25zdCBGSVJTVF9IT1VSID0gMDsKZXhwb3J0cy5GSVJTVF9IT1VSID0gRklSU1RfSE9VUjsKY29uc3QgT0ZGU0VUX1lFQVIgPSAxMDAwMDsKZXhwb3J0cy5PRkZTRVRfWUVBUiA9IE9GRlNFVF9ZRUFSOwpjb25zdCBPRkZTRVRfTU9OVEggPSAxMDA7CmV4cG9ydHMuT0ZGU0VUX01PTlRIID0gT0ZGU0VUX01PTlRIOwpjb25zdCBPRkZTRVRfSE9VUiA9IDEwMDsKZXhwb3J0cy5PRkZTRVRfSE9VUiA9IE9GRlNFVF9IT1VSOwpjb25zdCBPRkZTRVRfVElNRSA9IDEwMDAwOwpleHBvcnRzLk9GRlNFVF9USU1FID0gT0ZGU0VUX1RJTUU7CgpmdW5jdGlvbiBnZXRTdGFydE9mV2Vlayh0aW1lc3RhbXAsIHdlZWtkYXlzLCB0b2RheSkgewogIGNvbnN0IHN0YXJ0ID0gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApOwogIGZpbmRXZWVrZGF5KHN0YXJ0LCB3ZWVrZGF5c1swXSwgcHJldkRheSk7CiAgdXBkYXRlRm9ybWF0dGVkKHN0YXJ0KTsKCiAgaWYgKHRvZGF5KSB7CiAgICB1cGRhdGVSZWxhdGl2ZShzdGFydCwgdG9kYXksIHN0YXJ0Lmhhc1RpbWUpOwogIH0KCiAgcmV0dXJuIHN0YXJ0Owp9CgpmdW5jdGlvbiBnZXRFbmRPZldlZWsodGltZXN0YW1wLCB3ZWVrZGF5cywgdG9kYXkpIHsKICBjb25zdCBlbmQgPSBjb3B5VGltZXN0YW1wKHRpbWVzdGFtcCk7CiAgZmluZFdlZWtkYXkoZW5kLCB3ZWVrZGF5c1t3ZWVrZGF5cy5sZW5ndGggLSAxXSk7CiAgdXBkYXRlRm9ybWF0dGVkKGVuZCk7CgogIGlmICh0b2RheSkgewogICAgdXBkYXRlUmVsYXRpdmUoZW5kLCB0b2RheSwgZW5kLmhhc1RpbWUpOwogIH0KCiAgcmV0dXJuIGVuZDsKfQoKZnVuY3Rpb24gZ2V0U3RhcnRPZk1vbnRoKHRpbWVzdGFtcCkgewogIGNvbnN0IHN0YXJ0ID0gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApOwogIHN0YXJ0LmRheSA9IERBWV9NSU47CiAgdXBkYXRlV2Vla2RheShzdGFydCk7CiAgdXBkYXRlRm9ybWF0dGVkKHN0YXJ0KTsKICByZXR1cm4gc3RhcnQ7Cn0KCmZ1bmN0aW9uIGdldEVuZE9mTW9udGgodGltZXN0YW1wKSB7CiAgY29uc3QgZW5kID0gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApOwogIGVuZC5kYXkgPSBkYXlzSW5Nb250aChlbmQueWVhciwgZW5kLm1vbnRoKTsKICB1cGRhdGVXZWVrZGF5KGVuZCk7CiAgdXBkYXRlRm9ybWF0dGVkKGVuZCk7CiAgcmV0dXJuIGVuZDsKfQoKZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGlucHV0KSB7CiAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoaW5wdXQpIHx8ICEhUEFSU0VfVElNRS5leGVjKGlucHV0KSB8fCB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlzRmluaXRlKGlucHV0LmhvdXIpICYmIGlzRmluaXRlKGlucHV0Lm1pbnV0ZSk7Cn0KCmZ1bmN0aW9uIHBhcnNlVGltZShpbnB1dCkgewogIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7CiAgICAvLyB3aGVuIGEgbnVtYmVyIGlzIGdpdmVuLCBpdCdzIG1pbnV0ZXMgc2luY2UgMTI6MDBhbQogICAgcmV0dXJuIGlucHV0OwogIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykgewogICAgLy8gd2hlbiBhIHN0cmluZyBpcyBnaXZlbiwgaXQncyBhIGhoOm1tOnNzIGZvcm1hdCB3aGVyZSBzZWNvbmRzIGFyZSBvcHRpb25hbAogICAgY29uc3QgcGFydHMgPSBQQVJTRV9USU1FLmV4ZWMoaW5wdXQpOwoKICAgIGlmICghcGFydHMpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiBwYXJzZUludChwYXJ0c1sxXSkgKiA2MCArIHBhcnNlSW50KHBhcnRzWzNdIHx8IDApOwogIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JykgewogICAgLy8gd2hlbiBhbiBvYmplY3QgaXMgZ2l2ZW4sIGl0IG11c3QgaGF2ZSBob3VyIGFuZCBtaW51dGUKICAgIGlmICh0eXBlb2YgaW5wdXQuaG91ciAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGlucHV0Lm1pbnV0ZSAhPT0gJ251bWJlcicpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIHJldHVybiBpbnB1dC5ob3VyICogNjAgKyBpbnB1dC5taW51dGU7CiAgfSBlbHNlIHsKICAgIC8vIHVuc3VwcG9ydGVkIHR5cGUKICAgIHJldHVybiBmYWxzZTsKICB9Cn0KCmZ1bmN0aW9uIHZhbGlkYXRlVGltZXN0YW1wKGlucHV0KSB7CiAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoaW5wdXQpIHx8IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgJiYgISFQQVJTRV9SRUdFWC5leGVjKGlucHV0KSB8fCBpbnB1dCBpbnN0YW5jZW9mIERhdGU7Cn0KCmZ1bmN0aW9uIHBhcnNlVGltZXN0YW1wKGlucHV0LCByZXF1aXJlZCA9IGZhbHNlLCBub3cpIHsKICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShpbnB1dCkpIHsKICAgIGlucHV0ID0gbmV3IERhdGUoaW5wdXQpOwogIH0KCiAgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkgewogICAgY29uc3QgZGF0ZSA9IHBhcnNlRGF0ZShpbnB1dCk7CgogICAgaWYgKG5vdykgewogICAgICB1cGRhdGVSZWxhdGl2ZShkYXRlLCBub3csIGRhdGUuaGFzVGltZSk7CiAgICB9CgogICAgcmV0dXJuIGRhdGU7CiAgfQoKICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykgewogICAgaWYgKHJlcXVpcmVkKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpbnB1dH0gaXMgbm90IGEgdmFsaWQgdGltZXN0YW1wLiBJdCBtdXN0IGJlIGEgRGF0ZSwgbnVtYmVyIG9mIHNlY29uZHMgc2luY2UgRXBvY2gsIG9yIGEgc3RyaW5nIGluIHRoZSBmb3JtYXQgb2YgWVlZWS1NTS1ERCBvciBZWVlZLU1NLUREIGhoOm1tLiBaZXJvLXBhZGRpbmcgaXMgb3B0aW9uYWwgYW5kIHNlY29uZHMgYXJlIGlnbm9yZWQuYCk7CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfSAvLyBZWVlZLU1NLUREIGhoOm1tOnNzCgoKICBjb25zdCBwYXJ0cyA9IFBBUlNFX1JFR0VYLmV4ZWMoaW5wdXQpOwoKICBpZiAoIXBhcnRzKSB7CiAgICBpZiAocmVxdWlyZWQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2lucHV0fSBpcyBub3QgYSB2YWxpZCB0aW1lc3RhbXAuIEl0IG11c3QgYmUgYSBEYXRlLCBudW1iZXIgb2Ygc2Vjb25kcyBzaW5jZSBFcG9jaCwgb3IgYSBzdHJpbmcgaW4gdGhlIGZvcm1hdCBvZiBZWVlZLU1NLUREIG9yIFlZWVktTU0tREQgaGg6bW0uIFplcm8tcGFkZGluZyBpcyBvcHRpb25hbCBhbmQgc2Vjb25kcyBhcmUgaWdub3JlZC5gKTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9CgogIGNvbnN0IHRpbWVzdGFtcCA9IHsKICAgIGRhdGU6IGlucHV0LAogICAgdGltZTogJycsCiAgICB5ZWFyOiBwYXJzZUludChwYXJ0c1sxXSksCiAgICBtb250aDogcGFyc2VJbnQocGFydHNbMl0pLAogICAgZGF5OiBwYXJzZUludChwYXJ0c1s0XSkgfHwgMSwKICAgIGhvdXI6IHBhcnNlSW50KHBhcnRzWzZdKSB8fCAwLAogICAgbWludXRlOiBwYXJzZUludChwYXJ0c1s4XSkgfHwgMCwKICAgIHdlZWtkYXk6IDAsCiAgICBoYXNEYXk6ICEhcGFydHNbNF0sCiAgICBoYXNUaW1lOiAhIShwYXJ0c1s2XSAmJiBwYXJ0c1s4XSksCiAgICBwYXN0OiBmYWxzZSwKICAgIHByZXNlbnQ6IGZhbHNlLAogICAgZnV0dXJlOiBmYWxzZQogIH07CiAgdXBkYXRlV2Vla2RheSh0aW1lc3RhbXApOwogIHVwZGF0ZUZvcm1hdHRlZCh0aW1lc3RhbXApOwoKICBpZiAobm93KSB7CiAgICB1cGRhdGVSZWxhdGl2ZSh0aW1lc3RhbXAsIG5vdywgdGltZXN0YW1wLmhhc1RpbWUpOwogIH0KCiAgcmV0dXJuIHRpbWVzdGFtcDsKfQoKZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGUpIHsKICByZXR1cm4gdXBkYXRlRm9ybWF0dGVkKHsKICAgIGRhdGU6ICcnLAogICAgdGltZTogJycsCiAgICB5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKCksCiAgICBtb250aDogZGF0ZS5nZXRNb250aCgpICsgMSwKICAgIGRheTogZGF0ZS5nZXREYXRlKCksCiAgICB3ZWVrZGF5OiBkYXRlLmdldERheSgpLAogICAgaG91cjogZGF0ZS5nZXRIb3VycygpLAogICAgbWludXRlOiBkYXRlLmdldE1pbnV0ZXMoKSwKICAgIGhhc0RheTogdHJ1ZSwKICAgIGhhc1RpbWU6IHRydWUsCiAgICBwYXN0OiBmYWxzZSwKICAgIHByZXNlbnQ6IHRydWUsCiAgICBmdXR1cmU6IGZhbHNlCiAgfSk7Cn0KCmZ1bmN0aW9uIGdldERheUlkZW50aWZpZXIodGltZXN0YW1wKSB7CiAgcmV0dXJuIHRpbWVzdGFtcC55ZWFyICogT0ZGU0VUX1lFQVIgKyB0aW1lc3RhbXAubW9udGggKiBPRkZTRVRfTU9OVEggKyB0aW1lc3RhbXAuZGF5Owp9CgpmdW5jdGlvbiBnZXRUaW1lSWRlbnRpZmllcih0aW1lc3RhbXApIHsKICByZXR1cm4gdGltZXN0YW1wLmhvdXIgKiBPRkZTRVRfSE9VUiArIHRpbWVzdGFtcC5taW51dGU7Cn0KCmZ1bmN0aW9uIGdldFRpbWVzdGFtcElkZW50aWZpZXIodGltZXN0YW1wKSB7CiAgcmV0dXJuIGdldERheUlkZW50aWZpZXIodGltZXN0YW1wKSAqIE9GRlNFVF9USU1FICsgZ2V0VGltZUlkZW50aWZpZXIodGltZXN0YW1wKTsKfQoKZnVuY3Rpb24gdXBkYXRlUmVsYXRpdmUodGltZXN0YW1wLCBub3csIHRpbWUgPSBmYWxzZSkgewogIGxldCBhID0gZ2V0RGF5SWRlbnRpZmllcihub3cpOwogIGxldCBiID0gZ2V0RGF5SWRlbnRpZmllcih0aW1lc3RhbXApOwogIGxldCBwcmVzZW50ID0gYSA9PT0gYjsKCiAgaWYgKHRpbWVzdGFtcC5oYXNUaW1lICYmIHRpbWUgJiYgcHJlc2VudCkgewogICAgYSA9IGdldFRpbWVJZGVudGlmaWVyKG5vdyk7CiAgICBiID0gZ2V0VGltZUlkZW50aWZpZXIodGltZXN0YW1wKTsKICAgIHByZXNlbnQgPSBhID09PSBiOwogIH0KCiAgdGltZXN0YW1wLnBhc3QgPSBiIDwgYTsKICB0aW1lc3RhbXAucHJlc2VudCA9IHByZXNlbnQ7CiAgdGltZXN0YW1wLmZ1dHVyZSA9IGIgPiBhOwogIHJldHVybiB0aW1lc3RhbXA7Cn0KCmZ1bmN0aW9uIGlzVGltZWRsZXNzKGlucHV0KSB7CiAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInICYmIGlzRmluaXRlKGlucHV0KTsKfQoKZnVuY3Rpb24gdXBkYXRlSGFzVGltZSh0aW1lc3RhbXAsIGhhc1RpbWUsIG5vdykgewogIGlmICh0aW1lc3RhbXAuaGFzVGltZSAhPT0gaGFzVGltZSkgewogICAgdGltZXN0YW1wLmhhc1RpbWUgPSBoYXNUaW1lOwoKICAgIGlmICghaGFzVGltZSkgewogICAgICB0aW1lc3RhbXAuaG91ciA9IEhPVVJfTUFYOwogICAgICB0aW1lc3RhbXAubWludXRlID0gTUlOVVRFX01BWDsKICAgICAgdGltZXN0YW1wLnRpbWUgPSBnZXRUaW1lKHRpbWVzdGFtcCk7CiAgICB9CgogICAgaWYgKG5vdykgewogICAgICB1cGRhdGVSZWxhdGl2ZSh0aW1lc3RhbXAsIG5vdywgdGltZXN0YW1wLmhhc1RpbWUpOwogICAgfQogIH0KCiAgcmV0dXJuIHRpbWVzdGFtcDsKfQoKZnVuY3Rpb24gdXBkYXRlTWludXRlcyh0aW1lc3RhbXAsIG1pbnV0ZXMsIG5vdykgewogIHRpbWVzdGFtcC5oYXNUaW1lID0gdHJ1ZTsKICB0aW1lc3RhbXAuaG91ciA9IE1hdGguZmxvb3IobWludXRlcyAvIE1JTlVURVNfSU5fSE9VUik7CiAgdGltZXN0YW1wLm1pbnV0ZSA9IG1pbnV0ZXMgJSBNSU5VVEVTX0lOX0hPVVI7CiAgdGltZXN0YW1wLnRpbWUgPSBnZXRUaW1lKHRpbWVzdGFtcCk7CgogIGlmIChub3cpIHsKICAgIHVwZGF0ZVJlbGF0aXZlKHRpbWVzdGFtcCwgbm93LCB0cnVlKTsKICB9CgogIHJldHVybiB0aW1lc3RhbXA7Cn0KCmZ1bmN0aW9uIHVwZGF0ZVdlZWtkYXkodGltZXN0YW1wKSB7CiAgdGltZXN0YW1wLndlZWtkYXkgPSBnZXRXZWVrZGF5KHRpbWVzdGFtcCk7CiAgcmV0dXJuIHRpbWVzdGFtcDsKfQoKZnVuY3Rpb24gdXBkYXRlRm9ybWF0dGVkKHRpbWVzdGFtcCkgewogIHRpbWVzdGFtcC50aW1lID0gZ2V0VGltZSh0aW1lc3RhbXApOwogIHRpbWVzdGFtcC5kYXRlID0gZ2V0RGF0ZSh0aW1lc3RhbXApOwogIHJldHVybiB0aW1lc3RhbXA7Cn0KCmZ1bmN0aW9uIGdldFdlZWtkYXkodGltZXN0YW1wKSB7CiAgaWYgKHRpbWVzdGFtcC5oYXNEYXkpIHsKICAgIGNvbnN0IF8gPSBNYXRoLmZsb29yOwogICAgY29uc3QgayA9IHRpbWVzdGFtcC5kYXk7CiAgICBjb25zdCBtID0gKHRpbWVzdGFtcC5tb250aCArIDkpICUgTU9OVEhfTUFYICsgMTsKCiAgICBjb25zdCBDID0gXyh0aW1lc3RhbXAueWVhciAvIDEwMCk7CgogICAgY29uc3QgWSA9IHRpbWVzdGFtcC55ZWFyICUgMTAwIC0gKHRpbWVzdGFtcC5tb250aCA8PSAyID8gMSA6IDApOwogICAgcmV0dXJuICgoayArIF8oMi42ICogbSAtIDAuMikgLSAyICogQyArIFkgKyBfKFkgLyA0KSArIF8oQyAvIDQpKSAlIDcgKyA3KSAlIDc7CiAgfQoKICByZXR1cm4gdGltZXN0YW1wLndlZWtkYXk7Cn0KCmZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7CiAgcmV0dXJuICgwLCBfZGF0ZVRpbWVVdGlscy5pc0xlYXBZZWFyKSh5ZWFyKSA/IERBWVNfSU5fTU9OVEhfTEVBUFttb250aF0gOiBEQVlTX0lOX01PTlRIW21vbnRoXTsKfQoKZnVuY3Rpb24gY29weVRpbWVzdGFtcCh0aW1lc3RhbXApIHsKICBjb25zdCB7CiAgICBkYXRlLAogICAgdGltZSwKICAgIHllYXIsCiAgICBtb250aCwKICAgIGRheSwKICAgIHdlZWtkYXksCiAgICBob3VyLAogICAgbWludXRlLAogICAgaGFzRGF5LAogICAgaGFzVGltZSwKICAgIHBhc3QsCiAgICBwcmVzZW50LAogICAgZnV0dXJlCiAgfSA9IHRpbWVzdGFtcDsKICByZXR1cm4gewogICAgZGF0ZSwKICAgIHRpbWUsCiAgICB5ZWFyLAogICAgbW9udGgsCiAgICBkYXksCiAgICB3ZWVrZGF5LAogICAgaG91ciwKICAgIG1pbnV0ZSwKICAgIGhhc0RheSwKICAgIGhhc1RpbWUsCiAgICBwYXN0LAogICAgcHJlc2VudCwKICAgIGZ1dHVyZQogIH07Cn0KCmZ1bmN0aW9uIHBhZE51bWJlcih4LCBsZW5ndGgpIHsKICBsZXQgcGFkZGVkID0gU3RyaW5nKHgpOwoKICB3aGlsZSAocGFkZGVkLmxlbmd0aCA8IGxlbmd0aCkgewogICAgcGFkZGVkID0gJzAnICsgcGFkZGVkOwogIH0KCiAgcmV0dXJuIHBhZGRlZDsKfQoKZnVuY3Rpb24gZ2V0RGF0ZSh0aW1lc3RhbXApIHsKICBsZXQgc3RyID0gYCR7cGFkTnVtYmVyKHRpbWVzdGFtcC55ZWFyLCA0KX0tJHtwYWROdW1iZXIodGltZXN0YW1wLm1vbnRoLCAyKX1gOwogIGlmICh0aW1lc3RhbXAuaGFzRGF5KSBzdHIgKz0gYC0ke3BhZE51bWJlcih0aW1lc3RhbXAuZGF5LCAyKX1gOwogIHJldHVybiBzdHI7Cn0KCmZ1bmN0aW9uIGdldFRpbWUodGltZXN0YW1wKSB7CiAgaWYgKCF0aW1lc3RhbXAuaGFzVGltZSkgewogICAgcmV0dXJuICcnOwogIH0KCiAgcmV0dXJuIGAke3BhZE51bWJlcih0aW1lc3RhbXAuaG91ciwgMil9OiR7cGFkTnVtYmVyKHRpbWVzdGFtcC5taW51dGUsIDIpfWA7Cn0KCmZ1bmN0aW9uIG5leHRNaW51dGVzKHRpbWVzdGFtcCwgbWludXRlcykgewogIHRpbWVzdGFtcC5taW51dGUgKz0gbWludXRlczsKCiAgd2hpbGUgKHRpbWVzdGFtcC5taW51dGUgPiBNSU5VVEVTX0lOX0hPVVIpIHsKICAgIHRpbWVzdGFtcC5taW51dGUgLT0gTUlOVVRFU19JTl9IT1VSOwogICAgdGltZXN0YW1wLmhvdXIrKzsKCiAgICBpZiAodGltZXN0YW1wLmhvdXIgPj0gSE9VUlNfSU5fREFZKSB7CiAgICAgIG5leHREYXkodGltZXN0YW1wKTsKICAgICAgdGltZXN0YW1wLmhvdXIgPSBGSVJTVF9IT1VSOwogICAgfQogIH0KCiAgcmV0dXJuIHRpbWVzdGFtcDsKfQoKZnVuY3Rpb24gbmV4dERheSh0aW1lc3RhbXApIHsKICB0aW1lc3RhbXAuZGF5Kys7CiAgdGltZXN0YW1wLndlZWtkYXkgPSAodGltZXN0YW1wLndlZWtkYXkgKyAxKSAlIERBWVNfSU5fV0VFSzsKCiAgaWYgKHRpbWVzdGFtcC5kYXkgPiBEQVlTX0lOX01PTlRIX01JTiAmJiB0aW1lc3RhbXAuZGF5ID4gZGF5c0luTW9udGgodGltZXN0YW1wLnllYXIsIHRpbWVzdGFtcC5tb250aCkpIHsKICAgIHRpbWVzdGFtcC5kYXkgPSBEQVlfTUlOOwogICAgdGltZXN0YW1wLm1vbnRoKys7CgogICAgaWYgKHRpbWVzdGFtcC5tb250aCA+IE1PTlRIX01BWCkgewogICAgICB0aW1lc3RhbXAubW9udGggPSBNT05USF9NSU47CiAgICAgIHRpbWVzdGFtcC55ZWFyKys7CiAgICB9CiAgfQoKICByZXR1cm4gdGltZXN0YW1wOwp9CgpmdW5jdGlvbiBwcmV2RGF5KHRpbWVzdGFtcCkgewogIHRpbWVzdGFtcC5kYXktLTsKICB0aW1lc3RhbXAud2Vla2RheSA9ICh0aW1lc3RhbXAud2Vla2RheSArIDYpICUgREFZU19JTl9XRUVLOwoKICBpZiAodGltZXN0YW1wLmRheSA8IERBWV9NSU4pIHsKICAgIHRpbWVzdGFtcC5tb250aC0tOwoKICAgIGlmICh0aW1lc3RhbXAubW9udGggPCBNT05USF9NSU4pIHsKICAgICAgdGltZXN0YW1wLnllYXItLTsKICAgICAgdGltZXN0YW1wLm1vbnRoID0gTU9OVEhfTUFYOwogICAgfQoKICAgIHRpbWVzdGFtcC5kYXkgPSBkYXlzSW5Nb250aCh0aW1lc3RhbXAueWVhciwgdGltZXN0YW1wLm1vbnRoKTsKICB9CgogIHJldHVybiB0aW1lc3RhbXA7Cn0KCmZ1bmN0aW9uIHJlbGF0aXZlRGF5cyh0aW1lc3RhbXAsIG1vdmVyID0gbmV4dERheSwgZGF5cyA9IDEpIHsKICB3aGlsZSAoLS1kYXlzID49IDApIG1vdmVyKHRpbWVzdGFtcCk7CgogIHJldHVybiB0aW1lc3RhbXA7Cn0KCmZ1bmN0aW9uIGRpZmZNaW51dGVzKG1pbiwgbWF4KSB7CiAgY29uc3QgWSA9IChtYXgueWVhciAtIG1pbi55ZWFyKSAqIDUyNTYwMDsKICBjb25zdCBNID0gKG1heC5tb250aCAtIG1pbi5tb250aCkgKiA0MzgwMDsKICBjb25zdCBEID0gKG1heC5kYXkgLSBtaW4uZGF5KSAqIDE0NDA7CiAgY29uc3QgaCA9IChtYXguaG91ciAtIG1pbi5ob3VyKSAqIDYwOwogIGNvbnN0IG0gPSBtYXgubWludXRlIC0gbWluLm1pbnV0ZTsKICByZXR1cm4gWSArIE0gKyBEICsgaCArIG07Cn0KCmZ1bmN0aW9uIGZpbmRXZWVrZGF5KHRpbWVzdGFtcCwgd2Vla2RheSwgbW92ZXIgPSBuZXh0RGF5LCBtYXhEYXlzID0gNikgewogIHdoaWxlICh0aW1lc3RhbXAud2Vla2RheSAhPT0gd2Vla2RheSAmJiAtLW1heERheXMgPj0gMCkgbW92ZXIodGltZXN0YW1wKTsKCiAgcmV0dXJuIHRpbWVzdGFtcDsKfQoKZnVuY3Rpb24gZ2V0V2Vla2RheVNraXBzKHdlZWtkYXlzKSB7CiAgY29uc3Qgc2tpcHMgPSBbMSwgMSwgMSwgMSwgMSwgMSwgMV07CiAgY29uc3QgZmlsbGVkID0gWzAsIDAsIDAsIDAsIDAsIDAsIDBdOwoKICBmb3IgKGxldCBpID0gMDsgaSA8IHdlZWtkYXlzLmxlbmd0aDsgaSsrKSB7CiAgICBmaWxsZWRbd2Vla2RheXNbaV1dID0gMTsKICB9CgogIGZvciAobGV0IGsgPSAwOyBrIDwgREFZU19JTl9XRUVLOyBrKyspIHsKICAgIGxldCBza2lwID0gMTsKCiAgICBmb3IgKGxldCBqID0gMTsgaiA8IERBWVNfSU5fV0VFSzsgaisrKSB7CiAgICAgIGNvbnN0IG5leHQgPSAoayArIGopICUgREFZU19JTl9XRUVLOwoKICAgICAgaWYgKGZpbGxlZFtuZXh0XSkgewogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBza2lwKys7CiAgICB9CgogICAgc2tpcHNba10gPSBmaWxsZWRba10gKiBza2lwOwogIH0KCiAgcmV0dXJuIHNraXBzOwp9CgpmdW5jdGlvbiB0aW1lc3RhbXBUb0RhdGUodGltZXN0YW1wKSB7CiAgY29uc3QgdGltZSA9IGAke3BhZE51bWJlcih0aW1lc3RhbXAuaG91ciwgMil9OiR7cGFkTnVtYmVyKHRpbWVzdGFtcC5taW51dGUsIDIpfWA7CiAgY29uc3QgZGF0ZSA9IHRpbWVzdGFtcC5kYXRlOwogIHJldHVybiBuZXcgRGF0ZShgJHtkYXRlfVQke3RpbWV9OjAwKzAwOjAwYCk7Cn0KCmZ1bmN0aW9uIGNyZWF0ZURheUxpc3Qoc3RhcnQsIGVuZCwgbm93LCB3ZWVrZGF5U2tpcHMsIG1heCA9IDQyLCBtaW4gPSAwKSB7CiAgY29uc3Qgc3RvcCA9IGdldERheUlkZW50aWZpZXIoZW5kKTsKICBjb25zdCBkYXlzID0gW107CiAgbGV0IGN1cnJlbnQgPSBjb3B5VGltZXN0YW1wKHN0YXJ0KTsKICBsZXQgY3VycmVudElkZW50aWZpZXIgPSAwOwogIGxldCBzdG9wcGVkID0gY3VycmVudElkZW50aWZpZXIgPT09IHN0b3A7CgogIGlmIChzdG9wIDwgZ2V0RGF5SWRlbnRpZmllcihzdGFydCkpIHsKICAgIHRocm93IG5ldyBFcnJvcignRW5kIGRhdGUgaXMgZWFybGllciB0aGFuIHN0YXJ0IGRhdGUuJyk7CiAgfQoKICB3aGlsZSAoKCFzdG9wcGVkIHx8IGRheXMubGVuZ3RoIDwgbWluKSAmJiBkYXlzLmxlbmd0aCA8IG1heCkgewogICAgY3VycmVudElkZW50aWZpZXIgPSBnZXREYXlJZGVudGlmaWVyKGN1cnJlbnQpOwogICAgc3RvcHBlZCA9IHN0b3BwZWQgfHwgY3VycmVudElkZW50aWZpZXIgPT09IHN0b3A7CgogICAgaWYgKHdlZWtkYXlTa2lwc1tjdXJyZW50LndlZWtkYXldID09PSAwKSB7CiAgICAgIGN1cnJlbnQgPSBuZXh0RGF5KGN1cnJlbnQpOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBjb25zdCBkYXkgPSBjb3B5VGltZXN0YW1wKGN1cnJlbnQpOwogICAgdXBkYXRlRm9ybWF0dGVkKGRheSk7CiAgICB1cGRhdGVSZWxhdGl2ZShkYXksIG5vdyk7CiAgICBkYXlzLnB1c2goZGF5KTsKICAgIGN1cnJlbnQgPSByZWxhdGl2ZURheXMoY3VycmVudCwgbmV4dERheSwgd2Vla2RheVNraXBzW2N1cnJlbnQud2Vla2RheV0pOwogIH0KCiAgaWYgKCFkYXlzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRlcyBmb3VuZCB1c2luZyBzcGVjaWZpZWQgc3RhcnQgZGF0ZSwgZW5kIGRhdGUsIGFuZCB3ZWVrZGF5cy4nKTsKICByZXR1cm4gZGF5czsKfQoKZnVuY3Rpb24gY3JlYXRlSW50ZXJ2YWxMaXN0KHRpbWVzdGFtcCwgZmlyc3QsIG1pbnV0ZXMsIGNvdW50LCBub3cpIHsKICBjb25zdCBpbnRlcnZhbHMgPSBbXTsKCiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICBjb25zdCBtaW5zID0gZmlyc3QgKyBpICogbWludXRlczsKICAgIGNvbnN0IGludCA9IGNvcHlUaW1lc3RhbXAodGltZXN0YW1wKTsKICAgIGludGVydmFscy5wdXNoKHVwZGF0ZU1pbnV0ZXMoaW50LCBtaW5zLCBub3cpKTsKICB9CgogIHJldHVybiBpbnRlcnZhbHM7Cn0KCmZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlcihsb2NhbGUsIGdldE9wdGlvbnMpIHsKICBjb25zdCBlbXB0eUZvcm1hdHRlciA9IChfdCwgX3MpID0+ICcnOwoKICBpZiAodHlwZW9mIEludGwgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBJbnRsLkRhdGVUaW1lRm9ybWF0ID09PSAndW5kZWZpbmVkJykgewogICAgcmV0dXJuIGVtcHR5Rm9ybWF0dGVyOwogIH0KCiAgcmV0dXJuICh0aW1lc3RhbXAsIHNob3J0KSA9PiB7CiAgICB0cnkgewogICAgICBjb25zdCBpbnRsRm9ybWF0dGVyID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlIHx8IHVuZGVmaW5lZCwgZ2V0T3B0aW9ucyh0aW1lc3RhbXAsIHNob3J0KSk7CiAgICAgIHJldHVybiBpbnRsRm9ybWF0dGVyLmZvcm1hdCh0aW1lc3RhbXBUb0RhdGUodGltZXN0YW1wKSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiAnJzsKICAgIH0KICB9Owp9"},null]}