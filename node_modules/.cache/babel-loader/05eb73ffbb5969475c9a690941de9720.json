{"remainingRequest":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/babel-loader/lib/index.js!/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/vuetify/lib/components/VCalendar/VCalendar.js","dependencies":[{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/vuetify/lib/components/VCalendar/VCalendar.js","mtime":499162500000},{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}