{"remainingRequest":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/babel-loader/lib/index.js!/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-events.js","dependencies":[{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/vuetify/lib/components/VCalendar/mixins/calendar-with-events.js","mtime":499162500000},{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/edrosesingcay/Documents/EXAMS/driver-trip-tracker/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCIvVXNlcnMvZWRyb3Nlc2luZ2NheS9Eb2N1bWVudHMvRVhBTVMvZHJpdmVyLXRyaXAtdHJhY2tlci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwoKcmVxdWlyZSgiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL21peGlucy9jYWxlbmRhci13aXRoLWV2ZW50cy5zYXNzIik7Cgp2YXIgX3JpcHBsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi4vLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUiKSk7Cgp2YXIgX2NhbGVuZGFyQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9jYWxlbmRhci1iYXNlIikpOwoKdmFyIF9oZWxwZXJzID0gcmVxdWlyZSgiLi4vLi4vLi4vdXRpbC9oZWxwZXJzIik7Cgp2YXIgX3Byb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuLi91dGlsL3Byb3BzIikpOwoKdmFyIF9tb2RlcyA9IHJlcXVpcmUoIi4uL21vZGVzIik7Cgp2YXIgX3RpbWVzdGFtcCA9IHJlcXVpcmUoIi4uL3V0aWwvdGltZXN0YW1wIik7Cgp2YXIgX2V2ZW50cyA9IHJlcXVpcmUoIi4uL3V0aWwvZXZlbnRzIik7CgovLyBTdHlsZXMKLy8gRGlyZWN0aXZlcwovLyBNaXhpbnMKLy8gSGVscGVycwovLyBVdGlsCmNvbnN0IFdJRFRIX0ZVTEwgPSAxMDA7CmNvbnN0IFdJRFRIX1NUQVJUID0gOTU7CmNvbnN0IE1JTlVURVNfSU5fREFZID0gMTQ0MDsKLyogQHZ1ZS9jb21wb25lbnQgKi8KCnZhciBfZGVmYXVsdCA9IF9jYWxlbmRhckJhc2UuZGVmYXVsdC5leHRlbmQoewogIG5hbWU6ICdjYWxlbmRhci13aXRoLWV2ZW50cycsCiAgZGlyZWN0aXZlczogewogICAgcmlwcGxlOiBfcmlwcGxlLmRlZmF1bHQKICB9LAogIHByb3BzOiBfcHJvcHMuZGVmYXVsdC5ldmVudHMsCiAgY29tcHV0ZWQ6IHsKICAgIG5vRXZlbnRzKCkgewogICAgICByZXR1cm4gdGhpcy5ldmVudHMubGVuZ3RoID09PSAwOwogICAgfSwKCiAgICBwYXJzZWRFdmVudHMoKSB7CiAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5tYXAodGhpcy5wYXJzZUV2ZW50KTsKICAgIH0sCgogICAgcGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkKCkgewogICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5ldmVudE92ZXJsYXBUaHJlc2hvbGQpOwogICAgfSwKCiAgICBldmVudENvbG9yRnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5ldmVudENvbG9yID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudENvbG9yIDogKCkgPT4gdGhpcy5ldmVudENvbG9yOwogICAgfSwKCiAgICBldmVudFRpbWVkRnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5ldmVudFRpbWVkID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudFRpbWVkIDogZXZlbnQgPT4gISFldmVudFt0aGlzLmV2ZW50VGltZWRdOwogICAgfSwKCiAgICBldmVudENhdGVnb3J5RnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5ldmVudENhdGVnb3J5ID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudENhdGVnb3J5IDogZXZlbnQgPT4gZXZlbnRbdGhpcy5ldmVudENhdGVnb3J5XTsKICAgIH0sCgogICAgZXZlbnRUZXh0Q29sb3JGdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50VGV4dENvbG9yID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudFRleHRDb2xvciA6ICgpID0+IHRoaXMuZXZlbnRUZXh0Q29sb3I7CiAgICB9LAoKICAgIGV2ZW50TmFtZUZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdHlwZW9mIHRoaXMuZXZlbnROYW1lID09PSAnZnVuY3Rpb24nID8gdGhpcy5ldmVudE5hbWUgOiAoZXZlbnQsIHRpbWVkRXZlbnQpID0+ICgwLCBfaGVscGVycy5lc2NhcGVIVE1MKShldmVudC5pbnB1dFt0aGlzLmV2ZW50TmFtZV0pOwogICAgfSwKCiAgICBldmVudE1vZGVGdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmV2ZW50T3ZlcmxhcE1vZGUgPT09ICdmdW5jdGlvbicgPyB0aGlzLmV2ZW50T3ZlcmxhcE1vZGUgOiBfbW9kZXMuQ2FsZW5kYXJFdmVudE92ZXJsYXBNb2Rlc1t0aGlzLmV2ZW50T3ZlcmxhcE1vZGVdOwogICAgfSwKCiAgICBldmVudFdlZWtkYXlzKCkgewogICAgICByZXR1cm4gdGhpcy5wYXJzZWRXZWVrZGF5czsKICAgIH0sCgogICAgY2F0ZWdvcnlNb2RlKCkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogIH0sCiAgbWV0aG9kczogewogICAgcGFyc2VFdmVudChpbnB1dCwgaW5kZXggPSAwKSB7CiAgICAgIHJldHVybiAoMCwgX2V2ZW50cy5wYXJzZUV2ZW50KShpbnB1dCwgaW5kZXgsIHRoaXMuZXZlbnRTdGFydCwgdGhpcy5ldmVudEVuZCwgdGhpcy5ldmVudFRpbWVkRnVuY3Rpb24oaW5wdXQpLCB0aGlzLmNhdGVnb3J5TW9kZSA/IHRoaXMuZXZlbnRDYXRlZ29yeUZ1bmN0aW9uKGlucHV0KSA6IGZhbHNlKTsKICAgIH0sCgogICAgZm9ybWF0VGltZSh3aXRoVGltZSwgYW1wbSkgewogICAgICBjb25zdCBmb3JtYXR0ZXIgPSB0aGlzLmdldEZvcm1hdHRlcih7CiAgICAgICAgdGltZVpvbmU6ICdVVEMnLAogICAgICAgIGhvdXI6ICdudW1lcmljJywKICAgICAgICBtaW51dGU6IHdpdGhUaW1lLm1pbnV0ZSA+IDAgPyAnbnVtZXJpYycgOiB1bmRlZmluZWQKICAgICAgfSk7CiAgICAgIHJldHVybiBmb3JtYXR0ZXIod2l0aFRpbWUsIHRydWUpOwogICAgfSwKCiAgICB1cGRhdGVFdmVudFZpc2liaWxpdHkoKSB7CiAgICAgIGlmICh0aGlzLm5vRXZlbnRzIHx8ICF0aGlzLmV2ZW50TW9yZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY29uc3QgZXZlbnRIZWlnaHQgPSB0aGlzLmV2ZW50SGVpZ2h0OwogICAgICBjb25zdCBldmVudHNNYXAgPSB0aGlzLmdldEV2ZW50c01hcCgpOwoKICAgICAgZm9yIChjb25zdCBkYXRlIGluIGV2ZW50c01hcCkgewogICAgICAgIGNvbnN0IHsKICAgICAgICAgIHBhcmVudCwKICAgICAgICAgIGV2ZW50cywKICAgICAgICAgIG1vcmUKICAgICAgICB9ID0gZXZlbnRzTWFwW2RhdGVdOwoKICAgICAgICBpZiAoIW1vcmUpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgcGFyZW50Qm91bmRzID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgIGNvbnN0IGxhc3QgPSBldmVudHMubGVuZ3RoIC0gMTsKICAgICAgICBsZXQgaGlkZSA9IGZhbHNlOwogICAgICAgIGxldCBoaWRkZW4gPSAwOwoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBsYXN0OyBpKyspIHsKICAgICAgICAgIGlmICghaGlkZSkgewogICAgICAgICAgICBjb25zdCBldmVudEJvdW5kcyA9IGV2ZW50c1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgICAgICAgaGlkZSA9IGkgPT09IGxhc3QgPyBldmVudEJvdW5kcy5ib3R0b20gPiBwYXJlbnRCb3VuZHMuYm90dG9tIDogZXZlbnRCb3VuZHMuYm90dG9tICsgZXZlbnRIZWlnaHQgPiBwYXJlbnRCb3VuZHMuYm90dG9tOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChoaWRlKSB7CiAgICAgICAgICAgIGV2ZW50c1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICBoaWRkZW4rKzsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChoaWRlKSB7CiAgICAgICAgICBtb3JlLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgIG1vcmUuaW5uZXJIVE1MID0gdGhpcy4kdnVldGlmeS5sYW5nLnQodGhpcy5ldmVudE1vcmVUZXh0LCBoaWRkZW4pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtb3JlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIGdldEV2ZW50c01hcCgpIHsKICAgICAgY29uc3QgZXZlbnRzTWFwID0ge307CiAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy4kcmVmcy5ldmVudHM7CgogICAgICBpZiAoIWVsZW1lbnRzIHx8ICFlbGVtZW50cy5mb3JFYWNoKSB7CiAgICAgICAgcmV0dXJuIGV2ZW50c01hcDsKICAgICAgfQoKICAgICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7CiAgICAgICAgY29uc3QgZGF0ZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1kYXRlJyk7CgogICAgICAgIGlmIChlbC5wYXJlbnRFbGVtZW50ICYmIGRhdGUpIHsKICAgICAgICAgIGlmICghKGRhdGUgaW4gZXZlbnRzTWFwKSkgewogICAgICAgICAgICBldmVudHNNYXBbZGF0ZV0gPSB7CiAgICAgICAgICAgICAgcGFyZW50OiBlbC5wYXJlbnRFbGVtZW50LAogICAgICAgICAgICAgIG1vcmU6IG51bGwsCiAgICAgICAgICAgICAgZXZlbnRzOiBbXQogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9yZScpKSB7CiAgICAgICAgICAgIGV2ZW50c01hcFtkYXRlXS5tb3JlID0gZWw7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBldmVudHNNYXBbZGF0ZV0uZXZlbnRzLnB1c2goZWwpOwogICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGV2ZW50c01hcDsKICAgIH0sCgogICAgZ2VuRGF5RXZlbnQoewogICAgICBldmVudAogICAgfSwgZGF5KSB7CiAgICAgIGNvbnN0IGV2ZW50SGVpZ2h0ID0gdGhpcy5ldmVudEhlaWdodDsKICAgICAgY29uc3QgZXZlbnRNYXJnaW5Cb3R0b20gPSB0aGlzLmV2ZW50TWFyZ2luQm90dG9tOwogICAgICBjb25zdCBkYXlJZGVudGlmaWVyID0gKDAsIF90aW1lc3RhbXAuZ2V0RGF5SWRlbnRpZmllcikoZGF5KTsKICAgICAgY29uc3Qgd2VlayA9IGRheS53ZWVrOwogICAgICBjb25zdCBzdGFydCA9IGRheUlkZW50aWZpZXIgPT09IGV2ZW50LnN0YXJ0SWRlbnRpZmllcjsKICAgICAgbGV0IGVuZCA9IGRheUlkZW50aWZpZXIgPT09IGV2ZW50LmVuZElkZW50aWZpZXI7CiAgICAgIGxldCB3aWR0aCA9IFdJRFRIX1NUQVJUOwoKICAgICAgaWYgKCF0aGlzLmNhdGVnb3J5TW9kZSkgewogICAgICAgIGZvciAobGV0IGkgPSBkYXkuaW5kZXggKyAxOyBpIDwgd2Vlay5sZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3Qgd2Vla2RheUlkZW50aWZpZXIgPSAoMCwgX3RpbWVzdGFtcC5nZXREYXlJZGVudGlmaWVyKSh3ZWVrW2ldKTsKCiAgICAgICAgICBpZiAoZXZlbnQuZW5kSWRlbnRpZmllciA+PSB3ZWVrZGF5SWRlbnRpZmllcikgewogICAgICAgICAgICB3aWR0aCArPSBXSURUSF9GVUxMOwogICAgICAgICAgICBlbmQgPSBlbmQgfHwgd2Vla2RheUlkZW50aWZpZXIgPT09IGV2ZW50LmVuZElkZW50aWZpZXI7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBlbmQgPSB0cnVlOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGNvbnN0IHNjb3BlID0gewogICAgICAgIGV2ZW50UGFyc2VkOiBldmVudCwKICAgICAgICBkYXksCiAgICAgICAgc3RhcnQsCiAgICAgICAgZW5kLAogICAgICAgIHRpbWVkOiBmYWxzZQogICAgICB9OwogICAgICByZXR1cm4gdGhpcy5nZW5FdmVudChldmVudCwgc2NvcGUsIGZhbHNlLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWV2ZW50JywKICAgICAgICBjbGFzczogewogICAgICAgICAgJ3YtZXZlbnQtc3RhcnQnOiBzdGFydCwKICAgICAgICAgICd2LWV2ZW50LWVuZCc6IGVuZAogICAgICAgIH0sCiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIGhlaWdodDogYCR7ZXZlbnRIZWlnaHR9cHhgLAogICAgICAgICAgd2lkdGg6IGAke3dpZHRofSVgLAogICAgICAgICAgJ21hcmdpbi1ib3R0b20nOiBgJHtldmVudE1hcmdpbkJvdHRvbX1weGAKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnZGF0YS1kYXRlJzogZGF5LmRhdGUKICAgICAgICB9LAogICAgICAgIGtleTogZXZlbnQuaW5kZXgsCiAgICAgICAgcmVmOiAnZXZlbnRzJywKICAgICAgICByZWZJbkZvcjogdHJ1ZQogICAgICB9KTsKICAgIH0sCgogICAgZ2VuVGltZWRFdmVudCh7CiAgICAgIGV2ZW50LAogICAgICBsZWZ0LAogICAgICB3aWR0aAogICAgfSwgZGF5KSB7CiAgICAgIGlmIChkYXkudGltZURlbHRhKGV2ZW50LmVuZCkgPD0gMCB8fCBkYXkudGltZURlbHRhKGV2ZW50LnN0YXJ0KSA+PSAxKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBjb25zdCBkYXlJZGVudGlmaWVyID0gKDAsIF90aW1lc3RhbXAuZ2V0RGF5SWRlbnRpZmllcikoZGF5KTsKICAgICAgY29uc3Qgc3RhcnQgPSBldmVudC5zdGFydElkZW50aWZpZXIgPj0gZGF5SWRlbnRpZmllcjsKICAgICAgY29uc3QgZW5kID0gZXZlbnQuZW5kSWRlbnRpZmllciA+IGRheUlkZW50aWZpZXI7CiAgICAgIGNvbnN0IHRvcCA9IHN0YXJ0ID8gZGF5LnRpbWVUb1koZXZlbnQuc3RhcnQpIDogMDsKICAgICAgY29uc3QgYm90dG9tID0gZW5kID8gZGF5LnRpbWVUb1koTUlOVVRFU19JTl9EQVkpIDogZGF5LnRpbWVUb1koZXZlbnQuZW5kKTsKICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5ldmVudEhlaWdodCwgYm90dG9tIC0gdG9wKTsKICAgICAgY29uc3Qgc2NvcGUgPSB7CiAgICAgICAgZXZlbnRQYXJzZWQ6IGV2ZW50LAogICAgICAgIGRheSwKICAgICAgICBzdGFydCwKICAgICAgICBlbmQsCiAgICAgICAgdGltZWQ6IHRydWUKICAgICAgfTsKICAgICAgcmV0dXJuIHRoaXMuZ2VuRXZlbnQoZXZlbnQsIHNjb3BlLCB0cnVlLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWV2ZW50LXRpbWVkJywKICAgICAgICBzdHlsZTogewogICAgICAgICAgdG9wOiBgJHt0b3B9cHhgLAogICAgICAgICAgaGVpZ2h0OiBgJHtoZWlnaHR9cHhgLAogICAgICAgICAgbGVmdDogYCR7bGVmdH0lYCwKICAgICAgICAgIHdpZHRoOiBgJHt3aWR0aH0lYAogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIGdlbkV2ZW50KGV2ZW50LCBzY29wZUlucHV0LCB0aW1lZEV2ZW50LCBkYXRhKSB7CiAgICAgIHZhciBfdGhpcyRldmVudFJpcHBsZTsKCiAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5ldmVudDsKICAgICAgY29uc3QgdGV4dCA9IHRoaXMuZXZlbnRUZXh0Q29sb3JGdW5jdGlvbihldmVudC5pbnB1dCk7CiAgICAgIGNvbnN0IGJhY2tncm91bmQgPSB0aGlzLmV2ZW50Q29sb3JGdW5jdGlvbihldmVudC5pbnB1dCk7CiAgICAgIGNvbnN0IG92ZXJsYXBzTm9vbiA9IGV2ZW50LnN0YXJ0LmhvdXIgPCAxMiAmJiBldmVudC5lbmQuaG91ciA+PSAxMjsKICAgICAgY29uc3Qgc2luZ2xpbmUgPSAoMCwgX3RpbWVzdGFtcC5kaWZmTWludXRlcykoZXZlbnQuc3RhcnQsIGV2ZW50LmVuZCkgPD0gdGhpcy5wYXJzZWRFdmVudE92ZXJsYXBUaHJlc2hvbGQ7CiAgICAgIGNvbnN0IGZvcm1hdFRpbWUgPSB0aGlzLmZvcm1hdFRpbWU7CgogICAgICBjb25zdCB0aW1lU3VtbWFyeSA9ICgpID0+IGZvcm1hdFRpbWUoZXZlbnQuc3RhcnQsIG92ZXJsYXBzTm9vbikgKyAnIC0gJyArIGZvcm1hdFRpbWUoZXZlbnQuZW5kLCB0cnVlKTsKCiAgICAgIGNvbnN0IGV2ZW50U3VtbWFyeSA9ICgpID0+IHsKICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5ldmVudE5hbWVGdW5jdGlvbihldmVudCwgdGltZWRFdmVudCk7CgogICAgICAgIGlmIChldmVudC5zdGFydC5oYXNUaW1lKSB7CiAgICAgICAgICBpZiAodGltZWRFdmVudCkgewogICAgICAgICAgICBjb25zdCB0aW1lID0gdGltZVN1bW1hcnkoKTsKICAgICAgICAgICAgY29uc3QgZGVsaW1pdGVyID0gc2luZ2xpbmUgPyAnLCAnIDogJzxicj4nOwogICAgICAgICAgICByZXR1cm4gYDxzdHJvbmc+JHtuYW1lfTwvc3Ryb25nPiR7ZGVsaW1pdGVyfSR7dGltZX1gOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgdGltZSA9IGZvcm1hdFRpbWUoZXZlbnQuc3RhcnQsIHRydWUpOwogICAgICAgICAgICByZXR1cm4gYDxzdHJvbmc+JHt0aW1lfTwvc3Ryb25nPiAke25hbWV9YDsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBuYW1lOwogICAgICB9OwoKICAgICAgY29uc3Qgc2NvcGUgPSB7IC4uLnNjb3BlSW5wdXQsCiAgICAgICAgZXZlbnQ6IGV2ZW50LmlucHV0LAogICAgICAgIG91dHNpZGU6IHNjb3BlSW5wdXQuZGF5Lm91dHNpZGUsCiAgICAgICAgc2luZ2xpbmUsCiAgICAgICAgb3ZlcmxhcHNOb29uLAogICAgICAgIGZvcm1hdFRpbWUsCiAgICAgICAgdGltZVN1bW1hcnksCiAgICAgICAgZXZlbnRTdW1tYXJ5CiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB0aGlzLnNldFRleHRDb2xvcih0ZXh0LCB0aGlzLnNldEJhY2tncm91bmRDb2xvcihiYWNrZ3JvdW5kLCB7CiAgICAgICAgb246IHRoaXMuZ2V0RGVmYXVsdE1vdXNlRXZlbnRIYW5kbGVycygnOmV2ZW50JywgbmF0aXZlRXZlbnQgPT4gKHsgLi4uc2NvcGUsCiAgICAgICAgICBuYXRpdmVFdmVudAogICAgICAgIH0pKSwKICAgICAgICBkaXJlY3RpdmVzOiBbewogICAgICAgICAgbmFtZTogJ3JpcHBsZScsCiAgICAgICAgICB2YWx1ZTogKF90aGlzJGV2ZW50UmlwcGxlID0gdGhpcy5ldmVudFJpcHBsZSkgIT0gbnVsbCA/IF90aGlzJGV2ZW50UmlwcGxlIDogdHJ1ZQogICAgICAgIH1dLAogICAgICAgIC4uLmRhdGEKICAgICAgfSkpLCBzbG90ID8gc2xvdChzY29wZSkgOiBbdGhpcy5nZW5OYW1lKGV2ZW50U3VtbWFyeSldKTsKICAgIH0sCgogICAgZ2VuTmFtZShldmVudFN1bW1hcnkpIHsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3BsLTEnLAogICAgICAgIGRvbVByb3BzOiB7CiAgICAgICAgICBpbm5lckhUTUw6IGV2ZW50U3VtbWFyeSgpCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCgogICAgZ2VuUGxhY2Vob2xkZXIoZGF5KSB7CiAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuZXZlbnRIZWlnaHQgKyB0aGlzLmV2ZW50TWFyZ2luQm90dG9tOwogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICBoZWlnaHQ6IGAke2hlaWdodH1weGAKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAnZGF0YS1kYXRlJzogZGF5LmRhdGUKICAgICAgICB9LAogICAgICAgIHJlZjogJ2V2ZW50cycsCiAgICAgICAgcmVmSW5Gb3I6IHRydWUKICAgICAgfSk7CiAgICB9LAoKICAgIGdlbk1vcmUoZGF5KSB7CiAgICAgIHZhciBfdGhpcyRldmVudFJpcHBsZTI7CgogICAgICBjb25zdCBldmVudEhlaWdodCA9IHRoaXMuZXZlbnRIZWlnaHQ7CiAgICAgIGNvbnN0IGV2ZW50TWFyZ2luQm90dG9tID0gdGhpcy5ldmVudE1hcmdpbkJvdHRvbTsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3YtZXZlbnQtbW9yZSBwbC0xJywKICAgICAgICBjbGFzczogewogICAgICAgICAgJ3Ytb3V0c2lkZSc6IGRheS5vdXRzaWRlCiAgICAgICAgfSwKICAgICAgICBhdHRyczogewogICAgICAgICAgJ2RhdGEtZGF0ZSc6IGRheS5kYXRlLAogICAgICAgICAgJ2RhdGEtbW9yZSc6IDEKICAgICAgICB9LAogICAgICAgIGRpcmVjdGl2ZXM6IFt7CiAgICAgICAgICBuYW1lOiAncmlwcGxlJywKICAgICAgICAgIHZhbHVlOiAoX3RoaXMkZXZlbnRSaXBwbGUyID0gdGhpcy5ldmVudFJpcHBsZSkgIT0gbnVsbCA/IF90aGlzJGV2ZW50UmlwcGxlMiA6IHRydWUKICAgICAgICB9XSwKICAgICAgICBvbjogewogICAgICAgICAgY2xpY2s6ICgpID0+IHRoaXMuJGVtaXQoJ2NsaWNrOm1vcmUnLCBkYXkpCiAgICAgICAgfSwKICAgICAgICBzdHlsZTogewogICAgICAgICAgZGlzcGxheTogJ25vbmUnLAogICAgICAgICAgaGVpZ2h0OiBgJHtldmVudEhlaWdodH1weGAsCiAgICAgICAgICAnbWFyZ2luLWJvdHRvbSc6IGAke2V2ZW50TWFyZ2luQm90dG9tfXB4YAogICAgICAgIH0sCiAgICAgICAgcmVmOiAnZXZlbnRzJywKICAgICAgICByZWZJbkZvcjogdHJ1ZQogICAgICB9KTsKICAgIH0sCgogICAgZ2V0VmlzaWJsZUV2ZW50cygpIHsKICAgICAgY29uc3Qgc3RhcnQgPSAoMCwgX3RpbWVzdGFtcC5nZXREYXlJZGVudGlmaWVyKSh0aGlzLmRheXNbMF0pOwogICAgICBjb25zdCBlbmQgPSAoMCwgX3RpbWVzdGFtcC5nZXREYXlJZGVudGlmaWVyKSh0aGlzLmRheXNbdGhpcy5kYXlzLmxlbmd0aCAtIDFdKTsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VkRXZlbnRzLmZpbHRlcihldmVudCA9PiAoMCwgX2V2ZW50cy5pc0V2ZW50T3ZlcmxhcHBpbmcpKGV2ZW50LCBzdGFydCwgZW5kKSk7CiAgICB9LAoKICAgIGlzRXZlbnRGb3JDYXRlZ29yeShldmVudCwgY2F0ZWdvcnkpIHsKICAgICAgcmV0dXJuICF0aGlzLmNhdGVnb3J5TW9kZSB8fCBjYXRlZ29yeSA9PT0gZXZlbnQuY2F0ZWdvcnkgfHwgdHlwZW9mIGV2ZW50LmNhdGVnb3J5ICE9PSAnc3RyaW5nJyAmJiBjYXRlZ29yeSA9PT0gbnVsbDsKICAgIH0sCgogICAgZ2V0RXZlbnRzRm9yRGF5KGRheSkgewogICAgICBjb25zdCBpZGVudGlmaWVyID0gKDAsIF90aW1lc3RhbXAuZ2V0RGF5SWRlbnRpZmllcikoZGF5KTsKICAgICAgY29uc3QgZmlyc3RXZWVrZGF5ID0gdGhpcy5ldmVudFdlZWtkYXlzWzBdOwogICAgICByZXR1cm4gdGhpcy5wYXJzZWRFdmVudHMuZmlsdGVyKGV2ZW50ID0+ICgwLCBfZXZlbnRzLmlzRXZlbnRTdGFydCkoZXZlbnQsIGRheSwgaWRlbnRpZmllciwgZmlyc3RXZWVrZGF5KSk7CiAgICB9LAoKICAgIGdldEV2ZW50c0ZvckRheUFsbChkYXkpIHsKICAgICAgY29uc3QgaWRlbnRpZmllciA9ICgwLCBfdGltZXN0YW1wLmdldERheUlkZW50aWZpZXIpKGRheSk7CiAgICAgIGNvbnN0IGZpcnN0V2Vla2RheSA9IHRoaXMuZXZlbnRXZWVrZGF5c1swXTsKICAgICAgcmV0dXJuIHRoaXMucGFyc2VkRXZlbnRzLmZpbHRlcihldmVudCA9PiBldmVudC5hbGxEYXkgJiYgKHRoaXMuY2F0ZWdvcnlNb2RlID8gKDAsIF9ldmVudHMuaXNFdmVudE9uKShldmVudCwgaWRlbnRpZmllcikgOiAoMCwgX2V2ZW50cy5pc0V2ZW50U3RhcnQpKGV2ZW50LCBkYXksIGlkZW50aWZpZXIsIGZpcnN0V2Vla2RheSkpICYmIHRoaXMuaXNFdmVudEZvckNhdGVnb3J5KGV2ZW50LCBkYXkuY2F0ZWdvcnkpKTsKICAgIH0sCgogICAgZ2V0RXZlbnRzRm9yRGF5VGltZWQoZGF5KSB7CiAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSAoMCwgX3RpbWVzdGFtcC5nZXREYXlJZGVudGlmaWVyKShkYXkpOwogICAgICByZXR1cm4gdGhpcy5wYXJzZWRFdmVudHMuZmlsdGVyKGV2ZW50ID0+ICFldmVudC5hbGxEYXkgJiYgKDAsIF9ldmVudHMuaXNFdmVudE9uKShldmVudCwgaWRlbnRpZmllcikgJiYgdGhpcy5pc0V2ZW50Rm9yQ2F0ZWdvcnkoZXZlbnQsIGRheS5jYXRlZ29yeSkpOwogICAgfSwKCiAgICBnZXRTY29wZWRTbG90cygpIHsKICAgICAgaWYgKHRoaXMubm9FdmVudHMpIHsKICAgICAgICByZXR1cm4geyAuLi50aGlzLiRzY29wZWRTbG90cwogICAgICAgIH07CiAgICAgIH0KCiAgICAgIGNvbnN0IG1vZGUgPSB0aGlzLmV2ZW50TW9kZUZ1bmN0aW9uKHRoaXMucGFyc2VkRXZlbnRzLCB0aGlzLmV2ZW50V2Vla2RheXNbMF0sIHRoaXMucGFyc2VkRXZlbnRPdmVybGFwVGhyZXNob2xkKTsKCiAgICAgIGNvbnN0IGlzTm9kZSA9IGlucHV0ID0+ICEhaW5wdXQ7CgogICAgICBjb25zdCBnZXRTbG90Q2hpbGRyZW4gPSAoZGF5LCBnZXR0ZXIsIG1hcHBlciwgdGltZWQpID0+IHsKICAgICAgICBjb25zdCBldmVudHMgPSBnZXR0ZXIoZGF5KTsKICAgICAgICBjb25zdCB2aXN1YWxzID0gbW9kZShkYXksIGV2ZW50cywgdGltZWQsIHRoaXMuY2F0ZWdvcnlNb2RlKTsKCiAgICAgICAgaWYgKHRpbWVkKSB7CiAgICAgICAgICByZXR1cm4gdmlzdWFscy5tYXAodmlzdWFsID0+IG1hcHBlcih2aXN1YWwsIGRheSkpLmZpbHRlcihpc05vZGUpOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTsKICAgICAgICB2aXN1YWxzLmZvckVhY2goKHZpc3VhbCwgaW5kZXgpID0+IHsKICAgICAgICAgIHdoaWxlIChjaGlsZHJlbi5sZW5ndGggPCB2aXN1YWwuY29sdW1uKSB7CiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5nZW5QbGFjZWhvbGRlcihkYXkpKTsKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCBtYXBwZWQgPSBtYXBwZXIodmlzdWFsLCBkYXkpOwoKICAgICAgICAgIGlmIChtYXBwZWQpIHsKICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChtYXBwZWQpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybiBjaGlsZHJlbjsKICAgICAgfTsKCiAgICAgIGNvbnN0IHNsb3RzID0gdGhpcy4kc2NvcGVkU2xvdHM7CiAgICAgIGNvbnN0IHNsb3REYXkgPSBzbG90cy5kYXk7CiAgICAgIGNvbnN0IHNsb3REYXlIZWFkZXIgPSBzbG90c1snZGF5LWhlYWRlciddOwogICAgICBjb25zdCBzbG90RGF5Qm9keSA9IHNsb3RzWydkYXktYm9keSddOwogICAgICByZXR1cm4geyAuLi5zbG90cywKICAgICAgICBkYXk6IGRheSA9PiB7CiAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBnZXRTbG90Q2hpbGRyZW4oZGF5LCB0aGlzLmdldEV2ZW50c0ZvckRheSwgdGhpcy5nZW5EYXlFdmVudCwgZmFsc2UpOwoKICAgICAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwICYmIHRoaXMuZXZlbnRNb3JlKSB7CiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5nZW5Nb3JlKGRheSkpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChzbG90RGF5KSB7CiAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBzbG90RGF5KGRheSk7CgogICAgICAgICAgICBpZiAoc2xvdCkgewogICAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4gPyBjaGlsZHJlbi5jb25jYXQoc2xvdCkgOiBzbG90OwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIGNoaWxkcmVuOwogICAgICAgIH0sCiAgICAgICAgJ2RheS1oZWFkZXInOiBkYXkgPT4gewogICAgICAgICAgbGV0IGNoaWxkcmVuID0gZ2V0U2xvdENoaWxkcmVuKGRheSwgdGhpcy5nZXRFdmVudHNGb3JEYXlBbGwsIHRoaXMuZ2VuRGF5RXZlbnQsIGZhbHNlKTsKCiAgICAgICAgICBpZiAoc2xvdERheUhlYWRlcikgewogICAgICAgICAgICBjb25zdCBzbG90ID0gc2xvdERheUhlYWRlcihkYXkpOwoKICAgICAgICAgICAgaWYgKHNsb3QpIHsKICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuID8gY2hpbGRyZW4uY29uY2F0KHNsb3QpIDogc2xvdDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBjaGlsZHJlbjsKICAgICAgICB9LAogICAgICAgICdkYXktYm9keSc6IGRheSA9PiB7CiAgICAgICAgICBjb25zdCBldmVudHMgPSBnZXRTbG90Q2hpbGRyZW4oZGF5LCB0aGlzLmdldEV2ZW50c0ZvckRheVRpbWVkLCB0aGlzLmdlblRpbWVkRXZlbnQsIHRydWUpOwogICAgICAgICAgbGV0IGNoaWxkcmVuID0gW3RoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWV2ZW50LXRpbWVkLWNvbnRhaW5lcicKICAgICAgICAgIH0sIGV2ZW50cyldOwoKICAgICAgICAgIGlmIChzbG90RGF5Qm9keSkgewogICAgICAgICAgICBjb25zdCBzbG90ID0gc2xvdERheUJvZHkoZGF5KTsKCiAgICAgICAgICAgIGlmIChzbG90KSB7CiAgICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoc2xvdCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gY2hpbGRyZW47CiAgICAgICAgfQogICAgICB9OwogICAgfQoKICB9Cn0pOwoKZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7"},null]}